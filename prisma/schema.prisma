// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  username   String      @unique
  password   String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  comments   Comment[]   @relation("userComments")
  image_path String      @default("assets/user_images/sample.png")
  Admin      Admin?
  Favs       Fav[]
  ReadLater  ReadLater[]
  HistRead   HistRead[]
  last_seen  DateTime    @default(now())

  @@map("users")
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  comment_by String
  comment_in String
  // username_author String
  // author_img      String
  created_at DateTime @default(now())
  user       User     @relation("userComments", fields: [comment_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Hist       Hist?    @relation(fields: [comment_in], references: [ref])
  histId     String?

  @@map("comments")
}

model Hist {
  ref         String    @unique
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  last_view   DateTime
  views       Int       @default(0)
  likesNum    Int       @default(0)
  comments    Comment[]
  likes       Like[]    @relation("userLikes")
  Fav         Fav?
  readLaterId String?

  @@map("hists")
}

model Like {
  id     Int    @id @default(autoincrement())
  histId String
  hist   Hist   @relation("userLikes", fields: [histId], references: [id], onDelete: Cascade)
  userId String

  @@map("likes")
}

model News {
  id            Int      @id @default(autoincrement())
  title         String   @unique
  body          String?
  external_link String?
  image         String
  create_at     DateTime @default(now())
  views         Int      @default(0)

  @@map("news")
}

model Admin {
  user       User?    @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())

  userId String? @unique
  id     String  @id @default(uuid())

  @@map("admins")
}

model Fav {
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])
  histId      String @unique
  hist        Hist   @relation(fields: [histId], references: [id])
  id          String @id @unique @default(uuid())
  histMongoId String

  @@map("favs")
}

model HistRead {
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id])
  id             String @id @unique @default(uuid())
  subhistMongoId String

  @@map("hist_reads")
}

model ReadLater {
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id])
  id             String @id @unique @default(uuid())
  subhistMongoId String @unique

  @@map("read_laters")
}
